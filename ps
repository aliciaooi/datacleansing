set-location c:\windows
get-childItem
clear-host
test-connection 
get-netipconfiguration
Get-Command -Name Get-Service
get-help get-service -examples
get-service bits
get-command Invoke-Sqlcmd -syntax
get-command Invoke-Sqlcmd2 -syntax
Help about_CommonParameters -showwindow
Get-Help Get-Alias –Full
Get-Command –verb Get
Get-Command –name Get-Dba*
Get-Command –verb Get | Measure-Object
Get-Command –name Get-Dba* | Measure-Object
Get-Command –verb -
get-content 'C:\temp\fixed.txt' ##reads the contents of a textfile
get-content 'C:\temp\fixed.txt' |sort-object -Property "Member" 
get-content 'C:\temp\fixed.txt' |sort-object -Property "Member"
get-content 'C:\temp\fixed.txt' | select-string -Pattern "rman"   #select the lines in the txtfile with the word "rman"ipconfig /all | Select-String -Pattern "Ipv4 Address”
Get-Service | Sort-Object –Property DependentServices | Format-Table -Property Name, DependentServices -GroupBy DependentServices
Get-Process
Get-Process | Format-List –Property * ##full list of properties - a lot!!
driverquery
driverquery | Select-string –Pattern “File System”
driverquery | Select-string –Pattern “File System” | Out-File –FilePath C:\temp\drivers.txt
Import-CSV –Path C:\temp\fixed.txt   ## Displays the txt
<# .Synopsis Short description .DESCRIPTION Long description .EXAMPLE Example of how to use this cmdlet .EXAMPLE Another example of how to use this cmdlet .INPUTS Inputs to this cmdlet (if any) .OUTPUTS Output from this cmdlet (if any).NOTES General notes .COMPONENT The component this cmdlet belongs to .ROLE The role this cmdlet belongs to .FUNCTIONALITY The functionality that best describes this cmdlet #>   ## comment for creating script
$Import_Fixed = Get-Content C:\temp\fixed.txt Write-Host $Import_Fixed ## check value in Variable(Get-Process).Name -icontains "winlogon"
‘This is a simple string’ -match 'This' 
‘This is a simple string’ -match '^T\w+'
$total = (Get-ChildItem C:\windows\System32 -file | Measure-Object -Property length –sum).Sum   ## filtering the results for just one element of propertyWrite-Host $total
"Engineering-AU","Marketing-AU",”IT-AU","Finance-AU” | ForEach-Object { $_.Trim(“-AU”) }  ##using ForEach-Object function
"Engineering-AU","Marketing-AU",”IT-AU","Finance-AU” | Get-Member
Get-Process | Where-Object {$true}
Get-Process | Where-Object {$false}
$Import_Fixed | Where-object {$_.Member -eq "dbo"}
$Import_Fixed | Where-object {$_.Member -like "dbo"} 
function Add-UserToRole ([string] $server, [String] $Database , [string]$User, [string]$Role) {....}
Get-PSProvider
Get-Process –Name explorer –Outvariable expProcess ## can assign variable with -Outvariable 
$expProcess
[int]$integer = 23 ## assign default to integer type variableWrite-Output –InputObject (6*5)  ## need to put brackets around it to do the math
Write-Output –InputObject 6+5 ## result is 6+5
$cmd = "get-process"
$int = 5+5$int
$PSDefaultParameterValues = $null ## to initialise the Parameter
$PSDefaultParameterValues
### Arrays
$processes = Get-Process  $processes.GetUpperBound(0)  ## properties of get-process
$processes.GetType() ## properties of get-process variable >> System.Array
$users = "Johan","Chris","Gary"  ## manual array building
$users.GetType() 
$users
$users.Count
$users  += “PC” ## add to exisiting array
$users[0]  ## gets the first item in array
$users | Where-Object {$_ -like “*Chr*”}  ## Chris returned
$aryUsers.Clear() ## initiating or clearing array
$aryUsers2 = $null ## To delete the array object >> single value object
$users.GetEnumerator() ## use enumerator before piping to a function 
## Do while loop
$MinimumLength = 7
Do {     write-host "Password must be at least $MinimumLength characters long" $pwd = Read-Host "Enter a Password" –AsSecureString    } Until ($pwd.Length -GE $MinimumLength) Write-Host “Password Accepted”
## Do While a is less or equals to 5
$a=0 
Do {$a} 
While ($a++ -le 5)
